# Balboa Spa Monitor - ESPHome Configuration with Improved Entity Naming
# Parameterized for easy hardware customization

# =============================================================================
# HARDWARE CONFIGURATION
# =============================================================================
# All hardware settings are configured in secrets.yaml
# See secrets_template.txt for configuration options
# =============================================================================

esphome:
  name: !secret device_name
  friendly_name: !secret friendly_name
  build_path: .build/esphome_balboa_spa

# ESP32 Configuration
esp32:
  board: !secret board_type
  framework:
    type: !secret framework_type

# ESP8266 Configuration (uncomment if using ESP8266)
# esp8266:
#   board: ${board}
#   framework:
#     type: ${framework_type}

logger:
  level: INFO
  baud_rate: 115200
  logs:
    uart.arduino_esp32: WARN
    sensor: WARN
    template.sensor: WARN

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key
    
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Increase WiFi transmit power for better connection stability
  output_power: 20dB
  # Disable WiFi power saving for more stable connection
  power_save_mode: NONE
  # Enable fast connect for quicker reconnection
  fast_connect: true
  # Retry connection more aggressively
  reboot_timeout: 15s
  ap:
    ssid: "balboa-spa-config"
    password: !secret fallback_hotspot_password

captive_portal:

web_server:
  port: 80
  include_internal: true
  local: true
  # auth:
  #   username: !secret web_username
  #   password: !secret web_password

mqtt:
  broker: !secret mqtt_broker
  port: !secret mqtt_port
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false
  discovery_retain: false
  topic_prefix: home/balboa-spa-monitor
  birth_message:
    topic: home/balboa-spa-monitor/LWT
    payload: "online"
    retain: true
  will_message:
    topic: home/balboa-spa-monitor/LWT
    payload: "offline"
    retain: true

ota:
  - platform: esphome
    # Uncomment the next line and set ota_password in secrets.yaml for password protection
    # password: !secret ota_password

uart:
  id: spa_uart_bus
  tx_pin: !secret uart_tx_pin
  rx_pin: !secret uart_rx_pin
  baud_rate: !secret uart_baud_rate
  data_bits: 8
  parity: NONE
  stop_bits: 1
  rx_buffer_size: 1024
  # Optional: RS485 direction control
  # de_pin: !secret uart_de_pin

time:
  - platform: sntp
    id: sntp_time
    timezone: !secret timezone

external_components:
  - source: ./components
    components: [balboa_spa]
  # - source:
  #     type: git
  #     url: https://github.com/brianfeucht/esphome-balboa-spa
  #     ref: main
  #   components: [balboa_spa]

# =============================================================================
# BALBOA SPA COMPONENT CONFIGURATION
# =============================================================================

balboa_spa:
  id: spa
  uart_id: spa_uart_bus
  spa_temp_scale: !secret temperature_scale

# =============================================================================
# CLIMATE CONTROLS
# =============================================================================

climate:
  - platform: balboa_spa
    balboa_spa_id: spa
    name: "Spa Thermostat"
    id: spa_thermostat
    visual:
      min_temperature: 79 °F
      max_temperature: 104 °F  
      temperature_step: 1.0 °F

# =============================================================================
# SWITCH CONTROLS
# =============================================================================

switch:
  - platform: balboa_spa
    balboa_spa_id: spa
    jet1:
      name: "Spa Pump 1"
      id: spa_pump1_control
      icon: "mdi:pump"
      entity_category: diagnostic
      on_turn_on:
        - logger.log: "Pump 1 turned ON"
      on_turn_off:
        - logger.log: "Pump 1 turned OFF"
    jet2:
      name: "Spa Pump 2"
      id: spa_pump2_control
      icon: "mdi:pump"
      entity_category: diagnostic
      on_turn_on:
        - logger.log: "Pump 2 turned ON"
      on_turn_off:
        - logger.log: "Pump 2 turned OFF"
    light:
      name: "Spa Light"
      id: spa_light_control
      icon: "mdi:lightbulb"
      entity_category: diagnostic
      on_turn_on:
        - logger.log: "Light turned ON"
      on_turn_off:
        - logger.log: "Light turned OFF"

# =============================================================================
# SENSORS
# =============================================================================

sensor:
  - platform: balboa_spa
    balboa_spa_id: spa
    heatstate:
      name: "Spa Heat State"
      id: spa_heat_state
      icon: "mdi:thermometer"
      filters:
        - throttle: 2s
    circulation:
      name: "Spa Circulation"
      id: spa_circulation
      icon: "mdi:rotate-3d-variant"
      filters:
        - throttle: 5s
    restmode:
      name: "Spa Rest Mode"
      id: spa_rest_mode
      icon: "mdi:sleep"
      filters:
        - throttle: 5s
    spa_clock_hour:
      name: "Spa Clock Hour"
      id: spa_clock_hour
      icon: "mdi:clock-time-four-outline"
      filters:
        - throttle: 5s
    spa_clock_minute:
      name: "Spa Clock Minute"
      id: spa_clock_minute
      icon: "mdi:clock-time-four-outline"
      filters:
        - throttle: 5s

  # System Status Sensors
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_strength
    update_interval: 120s
    entity_category: diagnostic
  - platform: uptime
    name: "Device Uptime"
    id: device_uptime
    update_interval: 120s
    entity_category: diagnostic

  # Pump Speed Sensors
  - platform: template
    name: "Spa Pump 1 Speed"
    id: spa_pump1_speed
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      // Get pump state from spa object (0=off, 1=low, 2=high)
      auto pump_state = id(spa)->get_current_state()->pump1;
      ESP_LOGD("PUMP_DEBUG", "Pump 1 raw state: %d", pump_state);
      return pump_state;
    entity_category: diagnostic
  - platform: template
    name: "Spa Pump 2 Speed"
    id: spa_pump2_speed
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      // Get pump state from spa object (0=off, 1=low, 2=high)
      auto pump_state = id(spa)->get_current_state()->pump2;
      ESP_LOGD("PUMP_DEBUG", "Pump 2 raw state: %d", pump_state);
      return pump_state;
    entity_category: diagnostic



# =============================================================================
# BINARY SENSORS
# =============================================================================

binary_sensor:
  # System Status
  - platform: status
    name: "Device Status"
    id: device_status
    entity_category: diagnostic

  # Filter Status
  - platform: balboa_spa
    filter1_active:
      name: "Filter 1 Active"
      id: spa_filter1_active
      icon: "mdi:filter"
      entity_category: diagnostic
    filter2_active:
      name: "Filter 2 Active"
      id: spa_filter2_active
      icon: "mdi:filter"
      entity_category: diagnostic

  # Pump Status
  - platform: template
    name: "Spa Pump 1 Running"
    id: spa_pump1_running
    lambda: |-
      // Use actual pump speed instead of switch state
      auto pump_speed = id(spa)->get_current_state()->pump1;
      return pump_speed > 0;
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Spa Pump 2 Running"
    id: spa_pump2_running
    lambda: |-
      // Use actual pump speed instead of switch state
      auto pump_speed = id(spa)->get_current_state()->pump2;
      return pump_speed > 0;
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Spa Pump 1 Low Speed"
    id: spa_pump1_low_speed
    lambda: |-
      // Check if pump1 is in low speed state (value = 1)
      return id(spa)->get_current_state()->pump1 == 1;
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Spa Pump 1 High Speed"
    id: spa_pump1_high_speed
    lambda: |-
      // Check if pump1 is in high speed state (value = 2)
      return id(spa)->get_current_state()->pump1 == 2;
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Pump 2 Auto-Started Pump 1"
    id: pump2_auto_started_pump1
    lambda: |-
      // Check if pump2 is on and pump1 is also on (indicating auto-start)
      auto pump1 = id(spa)->get_current_state()->pump1;
      auto pump2 = id(spa)->get_current_state()->pump2;
      return (pump2 > 0) && (pump1 > 0);
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Spa Light Running"
    id: spa_light_running
    lambda: |-
      // Check if light is on
      return id(spa)->get_current_state()->light;
    icon: "mdi:lightbulb"
    entity_category: diagnostic

  - platform: template
    name: "Filter 1 Running"
    id: filter1_running_status
    lambda: |-
      return id(spa)->is_filter1_running();
    entity_category: diagnostic
    icon: "mdi:filter-variant"
    
  - platform: template
    name: "Filter 2 Running"
    id: filter2_running_status
    lambda: |-
      return id(spa)->is_filter2_enabled() && id(spa)->is_filter2_running();
    entity_category: diagnostic
    icon: "mdi:filter-variant"

# =============================================================================
# TEXT SENSORS
# =============================================================================

text_sensor:
  # System Info
  - platform: wifi_info
    ip_address:
      name: "Device IP Address"
      id: device_ip_address
      entity_category: diagnostic
      update_interval: 60s
    ssid:
      name: "Connected WiFi SSID"
      id: connected_wifi_ssid
      entity_category: diagnostic
      update_interval: 60s
    mac_address:
      name: "Device MAC Address"
      id: device_mac_address
      entity_category: diagnostic
  - platform: version
    name: "ESPHome Version"
    id: esphome_version
    entity_category: diagnostic

  # Spa Info
  - platform: template
    name: "Spa Time Display"
    id: spa_time_display
    lambda: |-
      int hour = (int)id(spa_clock_hour).state;
      int minute = (int)id(spa_clock_minute).state;
      if (hour < 0 || hour > 23 || minute < 0 || minute > 59) {
        return {};
      }
      
      // Convert to 12-hour format
      int display_hour = hour;
      const char* ampm = "am";
      if (hour == 0) {
        display_hour = 12;
        ampm = "am";
      } else if (hour == 12) {
        display_hour = 12;
        ampm = "pm";
      } else if (hour > 12) {
        display_hour = hour - 12;
        ampm = "pm";
      }
      
      char buf[8];
      snprintf(buf, sizeof(buf), "%d:%02d%s", display_hour, minute, ampm);
      return {buf};
    update_interval: 120s
    entity_category: diagnostic

  - platform: template
    name: "Filter 1 Schedule"
    id: spa_filter1_schedule
    lambda: |-
      // Get filter timing from the spa object
      int start_hour = id(spa)->get_filter1_start_hour();
      int start_minute = id(spa)->get_filter1_start_minute();
      int duration_hour = id(spa)->get_filter1_duration_hour();
      int duration_minute = id(spa)->get_filter1_duration_minute();
      
      if (start_hour < 0 || start_hour > 23 || start_minute < 0 || start_minute > 59) {
        return {};
      }
      
      // Calculate end time
      int end_hour = start_hour + duration_hour;
      int end_minute = start_minute + duration_minute;
      if (end_minute >= 60) {
        end_hour += end_minute / 60;
        end_minute = end_minute % 60;
      }
      if (end_hour >= 24) {
        end_hour = end_hour % 24;
      }
      
      // Convert start time to 12-hour format
      int start_display_hour = start_hour;
      const char* start_ampm = "am";
      if (start_hour == 0) {
        start_display_hour = 12;
        start_ampm = "am";
      } else if (start_hour == 12) {
        start_display_hour = 12;
        start_ampm = "pm";
      } else if (start_hour > 12) {
        start_display_hour = start_hour - 12;
        start_ampm = "pm";
      }
      
      // Convert end time to 12-hour format
      int end_display_hour = end_hour;
      const char* end_ampm = "am";
      if (end_hour == 0) {
        end_display_hour = 12;
        end_ampm = "am";
      } else if (end_hour == 12) {
        end_display_hour = 12;
        end_ampm = "pm";
      } else if (end_hour > 12) {
        end_display_hour = end_hour - 12;
        end_ampm = "pm";
      }
      
      char buf[32];
      snprintf(buf, sizeof(buf), "%d:%02d%s - %d:%02d%s", 
               start_display_hour, start_minute, start_ampm,
               end_display_hour, end_minute, end_ampm);
      return {buf};
    update_interval: 60s
    entity_category: diagnostic

  - platform: template
    name: "Filter 2 Schedule"
    id: spa_filter2_schedule
    lambda: |-
      // Get filter timing from the spa object
      int start_hour = id(spa)->get_filter2_start_hour();
      int start_minute = id(spa)->get_filter2_start_minute();
      int duration_hour = id(spa)->get_filter2_duration_hour();
      int duration_minute = id(spa)->get_filter2_duration_minute();
      
      if (start_hour < 0 || start_hour > 23 || start_minute < 0 || start_minute > 59) {
        return {};
      }
      
      // Calculate end time
      int end_hour = start_hour + duration_hour;
      int end_minute = start_minute + duration_minute;
      if (end_minute >= 60) {
        end_hour += end_minute / 60;
        end_minute = end_minute % 60;
      }
      if (end_hour >= 24) {
        end_hour = end_hour % 24;
      }
      
      // Convert start time to 12-hour format
      int start_display_hour = start_hour;
      const char* start_ampm = "am";
      if (start_hour == 0) {
        start_display_hour = 12;
        start_ampm = "am";
      } else if (start_hour == 12) {
        start_display_hour = 12;
        start_ampm = "pm";
      } else if (start_hour > 12) {
        start_display_hour = start_hour - 12;
        start_ampm = "pm";
      }
      
      // Convert end time to 12-hour format
      int end_display_hour = end_hour;
      const char* end_ampm = "am";
      if (end_hour == 0) {
        end_display_hour = 12;
        end_ampm = "am";
      } else if (end_hour == 12) {
        end_display_hour = 12;
        end_ampm = "pm";
      } else if (end_hour > 12) {
        end_display_hour = end_hour - 12;
        end_ampm = "pm";
      }
      
      char buf[32];
      snprintf(buf, sizeof(buf), "%d:%02d%s - %d:%02d%s", 
               start_display_hour, start_minute, start_ampm,
               end_display_hour, end_minute, end_ampm);
      return {buf};
    update_interval: 60s
    entity_category: diagnostic

# =============================================================================
# BUTTONS
# =============================================================================

button:
  # System Controls
  - platform: restart
    name: "Restart Device"
    id: device_restart
    entity_category: config

  # Spa Controls
  - platform: template
    name: "Sync Spa Time"
    id: spa_time_sync
    entity_category: config
    on_press:
      then:
        - lambda: |-
            auto now = id(sntp_time).now();
            int hour = now.hour;
            int minute = now.minute;
            id(spa)->set_hour(hour);
            id(spa)->set_minute(minute);
            
            // Log the synced time in 12-hour format
            int display_hour = hour;
            const char* ampm = "am";
            if (hour == 0) {
              display_hour = 12;
              ampm = "am";
            } else if (hour == 12) {
              display_hour = 12;
              ampm = "pm";
            } else if (hour > 12) {
              display_hour = hour - 12;
              ampm = "pm";
            }
            ESP_LOGI("TIME_SYNC", "Spa time synced to %d:%02d%s", display_hour, minute, ampm);

  - platform: template
    name: "Pump 1 Cycle State"
    id: spa_pump1_cycle
    entity_category: config
    on_press:
      then:
        - lambda: |-
            auto current_speed = id(spa)->get_current_state()->pump1;
            ESP_LOGD("PUMP_CONTROL", "Pump 1 current speed: %d", current_speed);
            
            if (current_speed == 0) {
              // OFF → LOW
              ESP_LOGD("PUMP_CONTROL", "Turning Pump 1 ON (LOW)");
              id(spa_pump1_control).turn_on();
            } else if (current_speed == 1) {
              // LOW → HIGH (turn off then on again)
              ESP_LOGD("PUMP_CONTROL", "Cycling Pump 1 to HIGH");
              id(spa_pump1_control).turn_off();
              delay(100);
              id(spa_pump1_control).turn_on();
            } else if (current_speed == 2) {
              // HIGH → OFF
              ESP_LOGD("PUMP_CONTROL", "Turning Pump 1 OFF");
              id(spa_pump1_control).turn_off();
            }

  - platform: template
    name: "Pump 2 Toggle"
    id: spa_pump2_toggle
    entity_category: config
    on_press:
      then:
        - lambda: |-
            auto current_speed = id(spa)->get_current_state()->pump2;
            ESP_LOGD("PUMP_CONTROL", "Pump 2 current speed: %d", current_speed);
            
            if (current_speed == 0) {
              // OFF → ON
              ESP_LOGD("PUMP_CONTROL", "Turning Pump 2 ON");
              id(spa_pump2_control).turn_on();
            } else {
              // ON → OFF
              ESP_LOGD("PUMP_CONTROL", "Turning Pump 2 OFF");
              id(spa_pump2_control).turn_off();
            }

  - platform: template
    name: "Spa Light Toggle"
    id: spa_light_toggle
    entity_category: config
    on_press:
      then:
        - lambda: |-
            auto light_state = id(spa)->get_current_state()->light;
            ESP_LOGD("LIGHT_CONTROL", "Light current state: %d", light_state);
            
            if (light_state == 0) {
              // OFF → ON
              ESP_LOGD("LIGHT_CONTROL", "Turning Light ON");
              id(spa_light_control).turn_on();
            } else {
              // ON → OFF
              ESP_LOGD("LIGHT_CONTROL", "Turning Light OFF");
              id(spa_light_control).turn_off();
            }

# =============================================================================
# AUTOMATIONS
# =============================================================================

interval:
  - interval: 60s
    then:
      - logger.log: "Spa communication check - monitoring for stability" 
  - interval: 48h
    then:
      - logger.log: "Auto-restarting device for stability"
      - button.press: device_restart

# =============================================================================
# FILTER MANAGEMENT EXTENSIONS (New Features)
# =============================================================================

# Note: The following filter features are available:
#
# - filter1_running_status: Shows if Filter 1 is currently running
# - filter2_running_status: Shows if Filter 2 is currently running
# - filter2_enable switch for enabling/disabling Filter 2
#
# See example_config_with_filters.yaml for complete implementation. 