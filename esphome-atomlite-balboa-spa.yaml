# Atom Lite Balboa Spa Monitor - ESPHome Configuration for Atom Lite + Tail485
# Based on M5Tough config, adapted for Atom Lite hardware

esphome:
  name: !secret device_name
  friendly_name: !secret friendly_name
  build_path: .build/esphome_atomlite_balboa_spa

esp32:
  board: m5stack-atom
  framework:
    type: arduino

logger:
  level: DEBUG
  baud_rate: 115200
  logs:
    uart.arduino_esp32: WARN
    sensor: WARN
    template.sensor: WARN

# Enable Home Assistant API
api:
  encryption:
    key: "FffAUQcept5X3djf8KOy5RPfPjIJM2Kcm64jokfU+CI="
    
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "AtomLite-Balboa-Spa"
    password: !secret fallback_hotspot_password

captive_portal:

web_server:
  port: 80
  include_internal: true
  local: true
  # auth:
  #   username: !secret web_username
  #   password: !secret web_password

mqtt:
  broker: !secret mqtt_broker
  port: !secret mqtt_port
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false
  discovery_retain: false
  topic_prefix: home/atomlite-balboa-spa
  birth_message:
    topic: home/atomlite-balboa-spa/LWT
    payload: "online"
    retain: true
  will_message:
    topic: home/atomlite-balboa-spa/LWT
    payload: "offline"
    retain: true

ota:
  - platform: esphome
    # Uncomment the next line and set ota_password in secrets.yaml for password protection
    # password: !secret ota_password

uart:
  id: spa_uart_bus
  tx_pin: GPIO26  # Tail485 TX pin
  rx_pin: GPIO32  # Tail485 RX pin
  baud_rate: 115200
  data_bits: 8
  parity: NONE
  stop_bits: 1
  rx_buffer_size: 1024

time:
  - platform: sntp
    id: sntp_time
    timezone: "America/Chicago"

external_components:
  - source: ./components
    components: [balboa_spa]
  # - source:
  #     type: git
  #     url: https://github.com/brianfeucht/esphome-balboa-spa
  #     ref: main
  #   components: [balboa_spa]



balboa_spa:
  id: spa
  uart_id: spa_uart_bus
  spa_temp_scale: F
  # esphome_temp_scale: F


climate:
  - platform: balboa_spa
    balboa_spa_id: spa
    name: "Spa Thermostat"
    id: spa_thermostat
    visual:
      min_temperature: 62 °F
      max_temperature: 105 °F  
      temperature_step: 0.5 °F

switch:
  - platform: balboa_spa
    balboa_spa_id: spa
    jet1:
      name: "Spa Pump 1 (Hidden)"
      id: spa_pump1
      icon: "mdi:pump"
      entity_category: diagnostic
      on_turn_on:
        - logger.log: "Pump 1 turned ON"
      on_turn_off:
        - logger.log: "Pump 1 turned OFF"
    jet2:
      name: "Spa Pump 2 (Hidden)"
      id: spa_pump2
      icon: "mdi:pump"
      entity_category: diagnostic
      on_turn_on:
        - logger.log: "Pump 2 turned ON"
      on_turn_off:
        - logger.log: "Pump 2 turned OFF"
    light:
      name: "Spa Light (Hidden)"
      id: spa_light
      icon: "mdi:lightbulb"
      entity_category: diagnostic
      on_turn_on:
        - logger.log: "Light turned ON"
      on_turn_off:
        - logger.log: "Light turned OFF"

sensor:
  - platform: balboa_spa
    balboa_spa_id: spa
    heatstate:
      name: "Spa Heat State"
      id: spa_heat_state
      icon: "mdi:thermometer"
      filters:
        - throttle: 2s
    circulation:
      name: "Spa Circulation"
      id: spa_circulation
      icon: "mdi:rotate-3d-variant"
      filters:
        - throttle: 5s
    restmode:
      name: "Spa Rest Mode"
      id: spa_rest_mode
      icon: "mdi:sleep"
      filters:
        - throttle: 5s
    spa_clock_hour:
      name: "Spa Clock Hour"
      id: spa_clock_hour
      icon: "mdi:clock-time-four-outline"
      filters:
        - throttle: 5s
    spa_clock_minute:
      name: "Spa Clock Minute"
      id: spa_clock_minute
      icon: "mdi:clock-time-four-outline"
      filters:
        - throttle: 5s
  - platform: template
    name: "Spa Current Temperature"
    id: spa_current_temp
    unit_of_measurement: "°F"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 30s
    lambda: |-
      if (id(spa_thermostat).current_temperature != NAN) {
        return id(spa_thermostat).current_temperature;
      } else {
        return {};
      }
    filters:
      - filter_out: nan
      - throttle: 10s

  # Debug sensors for temperature investigation
  - platform: template
    name: "Debug - Target Temp Raw Byte"
    id: debug_target_temp_raw
    lambda: |-
      return id(spa).get_status_byte_25();
    filters:
      - throttle: 5s
  - platform: template
    name: "Debug - Current Temp Raw Byte"
    id: debug_current_temp_raw
    lambda: |-
      return id(spa).get_status_byte_7();
    filters:
      - throttle: 5s
  - platform: template
    name: "Debug - Target Temp Raw / 2"
    id: debug_target_temp_div2
    lambda: |-
      return id(spa).get_status_byte_25() / 2.0;
    filters:
      - throttle: 5s
  - platform: template
    name: "Debug - Current Temp Raw / 2"
    id: debug_current_temp_div2
    lambda: |-
      return id(spa).get_status_byte_7() / 2.0;
    filters:
      - throttle: 5s
  - platform: template
    name: "Spa Target Temperature"
    id: spa_target_temp
    unit_of_measurement: "°F"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 30s
    lambda: |-
      if (id(spa_thermostat).target_temperature != NAN) {
        return id(spa_thermostat).target_temperature * 1.8 + 32.0;
      } else {
        return {};
      }
    filters:
      - filter_out: nan
      - throttle: 10s
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 120s
    entity_category: diagnostic
  - platform: uptime
    name: "Uptime"
    update_interval: 120s
    entity_category: diagnostic
  - platform: template
    name: "Spa Pump 1 Speed"
    id: spa_pump1_speed
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      // Get pump state from spa object (0=off, 1=low, 2=high)
      auto pump_state = id(spa)->get_current_state()->pump1;
      ESP_LOGD("PUMP_DEBUG", "Pump 1 raw state: %d", pump_state);
      return pump_state;
    entity_category: diagnostic
  - platform: template
    name: "Spa Pump 2 Speed"
    id: spa_pump2_speed
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      // Get pump state from spa object (0=off, 1=low, 2=high)
      auto pump_state = id(spa)->get_current_state()->pump2;
      ESP_LOGD("PUMP_DEBUG", "Pump 2 raw state: %d", pump_state);
      return pump_state;
    entity_category: diagnostic

  - platform: template
    name: "Debug - Jet 1 Raw"
    id: debug_jet1_raw
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      // Get raw jet1 state (should be 0 or 1)
      auto jet_state = id(spa)->get_current_state()->jet1;
      ESP_LOGD("PUMP_DEBUG", "Jet 1 raw state: %d", jet_state);
      return jet_state;
    entity_category: diagnostic

  - platform: template
    name: "Debug - Jet 2 Raw"
    id: debug_jet2_raw
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      // Get raw jet2 state (should be 0 or 1)
      auto jet_state = id(spa)->get_current_state()->jet2;
      ESP_LOGD("PUMP_DEBUG", "Jet 2 raw state: %d", jet_state);
      return jet_state;
    entity_category: diagnostic

  - platform: template
    name: "Debug - Status Byte 16"
    id: debug_status_byte_16
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      auto byte_val = id(spa)->get_status_byte_16();
      ESP_LOGD("PUMP_DEBUG", "Status Byte 16: 0x%02X", byte_val);
      return byte_val;
    entity_category: diagnostic

  - platform: template
    name: "Debug - Status Byte 17"
    id: debug_status_byte_17
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      auto byte_val = id(spa)->get_status_byte_17();
      ESP_LOGD("PUMP_DEBUG", "Status Byte 17: 0x%02X", byte_val);
      return byte_val;
    entity_category: diagnostic

  - platform: template
    name: "Debug - Status Byte 18"
    id: debug_status_byte_18
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      auto byte_val = id(spa)->get_status_byte_18();
      ESP_LOGD("PUMP_DEBUG", "Status Byte 18: 0x%02X", byte_val);
      return byte_val;
    entity_category: diagnostic

  - platform: template
    name: "Debug - Status Byte 19"
    id: debug_status_byte_19
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      auto byte_val = id(spa)->get_status_byte_19();
      ESP_LOGD("PUMP_DEBUG", "Status Byte 19: 0x%02X", byte_val);
      return byte_val;
    entity_category: diagnostic

  - platform: template
    name: "Debug - Pump Interdependency"
    id: debug_pump_interdependency
    unit_of_measurement: ""
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      auto pump1 = id(spa)->get_current_state()->pump1;
      auto pump2 = id(spa)->get_current_state()->pump2;
      ESP_LOGD("PUMP_DEBUG", "Pump1: %d, Pump2: %d - Interdependency check", pump1, pump2);
      
      // Check if pump2 is on and pump1 is automatically on
      if (pump2 > 0 && pump1 > 0) {
        ESP_LOGD("PUMP_DEBUG", "Pump2 is ON and Pump1 is also ON (interdependency detected)");
      }
      return pump1 * 10 + pump2; // Combine both values for easy reading
    entity_category: diagnostic

binary_sensor:
  - platform: status
    name: "Device Status"
    entity_category: diagnostic
  - platform: balboa_spa
    filter1_active:
      name: "Filter 1 Enabled"
      id: spa_filter1_active
      icon: "mdi:filter"
      entity_category: diagnostic
    filter2_active:
      name: "Filter 2 Enabled"
      id: spa_filter2_active
      icon: "mdi:filter"
      entity_category: diagnostic
  - platform: template
    name: "Spa Pump 1 Running"
    id: spa_pump1_running_template
    lambda: |-
      // Use actual pump speed instead of switch state
      auto pump_speed = id(spa)->get_current_state()->pump1;
      return pump_speed > 0;
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Spa Pump 2 Running"
    id: spa_pump2_running_template
    lambda: |-
      // Use actual pump speed instead of switch state
      auto pump_speed = id(spa)->get_current_state()->pump2;
      return pump_speed > 0;
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Spa Pump 1 Low Speed"
    id: spa_pump1_low
    lambda: |-
      // Check if pump1 is in low speed state (value = 1)
      return id(spa)->get_current_state()->pump1 == 1;
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Spa Pump 1 High Speed"
    id: spa_pump1_high
    lambda: |-
      // Check if pump1 is in high speed state (value = 2)
      return id(spa)->get_current_state()->pump1 == 2;
    icon: "mdi:pump"
    entity_category: diagnostic



  - platform: template
    name: "Pump 2 Auto-Started Pump 1"
    id: pump2_auto_started_pump1
    lambda: |-
      // Check if pump2 is on and pump1 is also on (indicating auto-start)
      auto pump1 = id(spa)->get_current_state()->pump1;
      auto pump2 = id(spa)->get_current_state()->pump2;
      return (pump2 > 0) && (pump1 > 0);
    icon: "mdi:pump"
    entity_category: diagnostic

  - platform: template
    name: "Spa Light Running"
    id: spa_light_running
    lambda: |-
      // Check if light is on
      return id(spa)->get_current_state()->light;
    icon: "mdi:lightbulb"
    entity_category: diagnostic

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
      update_interval: 60s
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
      update_interval: 60s
    mac_address:
      name: "MAC Address"
      entity_category: diagnostic
  - platform: version
    name: "ESPHome Version"
    entity_category: diagnostic
  - platform: template
    name: "Spa Time"
    id: spa_time
    lambda: |-
      int hour = (int)id(spa_clock_hour).state;
      int minute = (int)id(spa_clock_minute).state;
      if (hour < 0 || hour > 23 || minute < 0 || minute > 59) {
        return {};
      }
      char buf[6];
      snprintf(buf, sizeof(buf), "%02d:%02d", hour, minute);
      return {buf};
    update_interval: 120s
    entity_category: diagnostic
  - platform: template
    name: "Filter 1 Schedule"
    id: spa_filter1_schedule
    lambda: |-
      // Get filter timing from the spa object
      int start_hour = id(spa)->get_filter1_start_hour();
      int start_minute = id(spa)->get_filter1_start_minute();
      int duration_hour = id(spa)->get_filter1_duration_hour();
      int duration_minute = id(spa)->get_filter1_duration_minute();
      
      if (start_hour < 0 || start_hour > 23 || start_minute < 0 || start_minute > 59) {
        return {};
      }
      
      char buf[32];
      snprintf(buf, sizeof(buf), "%02d:%02d (%02d:%02d)", 
               start_hour, start_minute, duration_hour, duration_minute);
      return {buf};
    update_interval: 60s
    entity_category: diagnostic
  - platform: template
    name: "Filter 2 Schedule"
    id: spa_filter2_schedule
    lambda: |-
      // Get filter timing from the spa object
      int start_hour = id(spa)->get_filter2_start_hour();
      int start_minute = id(spa)->get_filter2_start_minute();
      int duration_hour = id(spa)->get_filter2_duration_hour();
      int duration_minute = id(spa)->get_filter2_duration_minute();
      
      if (start_hour < 0 || start_hour > 23 || start_minute < 0 || start_minute > 59) {
        return {};
      }
      
      char buf[32];
      snprintf(buf, sizeof(buf), "%02d:%02d (%02d:%02d)", 
               start_hour, start_minute, duration_hour, duration_minute);
      return {buf};
    update_interval: 60s
    entity_category: diagnostic

button:
  - platform: restart
    name: "Restart"
    id: spa_restart_btn
    entity_category: diagnostic
  - platform: template
    name: "Sync Spa Time"
    id: sync_spa_time
    entity_category: diagnostic
    on_press:
      then:
        - lambda: |-
            auto now = id(sntp_time).now();
            int hour = now.hour;
            int minute = now.minute;
            id(spa)->set_hour(hour);
            id(spa)->set_minute(minute);

  - platform: template
    name: "Pump 1 Cycle State"
    id: pump1_cycle_button
    entity_category: diagnostic
    on_press:
      then:
        - lambda: |-
            auto current_speed = id(spa)->get_current_state()->pump1;
            ESP_LOGD("PUMP_CONTROL", "Pump 1 current speed: %d", current_speed);
            
            if (current_speed == 0) {
              // OFF → LOW
              ESP_LOGD("PUMP_CONTROL", "Turning Pump 1 ON (LOW)");
              id(spa_pump1).turn_on();
            } else if (current_speed == 1) {
              // LOW → HIGH (turn off then on again)
              ESP_LOGD("PUMP_CONTROL", "Cycling Pump 1 to HIGH");
              id(spa_pump1).turn_off();
              delay(100);
              id(spa_pump1).turn_on();
            } else if (current_speed == 2) {
              // HIGH → OFF
              ESP_LOGD("PUMP_CONTROL", "Turning Pump 1 OFF");
              id(spa_pump1).turn_off();
            }

  - platform: template
    name: "Pump 2 Toggle"
    id: pump2_toggle_button
    entity_category: diagnostic
    on_press:
      then:
        - lambda: |-
            auto current_speed = id(spa)->get_current_state()->pump2;
            ESP_LOGD("PUMP_CONTROL", "Pump 2 current speed: %d", current_speed);
            
            if (current_speed == 0) {
              // OFF → ON
              ESP_LOGD("PUMP_CONTROL", "Turning Pump 2 ON");
              id(spa_pump2).turn_on();
            } else {
              // ON → OFF
              ESP_LOGD("PUMP_CONTROL", "Turning Pump 2 OFF");
              id(spa_pump2).turn_off();
            }

  - platform: template
    name: "Spa Light Toggle"
    id: spa_light_toggle_button
    entity_category: diagnostic
    on_press:
      then:
        - lambda: |-
            auto light_state = id(spa)->get_current_state()->light;
            ESP_LOGD("LIGHT_CONTROL", "Light current state: %d", light_state);
            
            if (light_state == 0) {
              // OFF → ON
              ESP_LOGD("LIGHT_CONTROL", "Turning Light ON");
              id(spa_light).turn_on();
            } else {
              // ON → OFF
              ESP_LOGD("LIGHT_CONTROL", "Turning Light OFF");
              id(spa_light).turn_off();
            }

interval:
  - interval: 60s
    then:
      - logger.log: "Spa communication check - monitoring for stability" 
  - interval: 48h
    then:
      - logger.log: "Auto-restarting device for stability"
      - button.press:  spa_restart_btn
